<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="mainMenuStrip.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="mainStatusStrip.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>132, 17</value>
  </metadata>
  <data name="label3.Text" xml:space="preserve">
    <value>AUTOACTIVATE property (part of Property element)
Because Office 365 ProPlus is set to activate automatically, you should not set this property for Office 365 ProPlus products.

For other products, you can set AUTOACTIVATE to 1 to have the product activate automatically.

Optional. Default is 0.

&lt;Property Name="AUTOACTIVATE"
          Value="0"/&gt;
&lt;Property Name="AUTOACTIVATE"
          Value="1"/&gt;
</value>
  </data>
  <data name="label5.Text" xml:space="preserve">
    <value>FORCEAPPSHUTDOWN property (part of Property element)

When set to TRUE, forces any apps that are blocking the install of Office to shut down. Data loss may occur.

Optional. Default is FALSE.

&lt;Property Name="FORCEAPPSHUTDOWN"
          Value="FALSE"/&gt;
    &lt;Property Name="FORCEAPPSHUTDOWN"
          Value="TRUE"/&gt;
</value>
  </data>
  <data name="label4.Text" xml:space="preserve">
    <value>PACKAGEGUID property (part of Property element)

By default, App-V packages created by the ODT share the same App-V Package ID. Administrators can use PACKAGEGUID to specify a different Package ID.

This allows you to publish multiple App-V packages of Officee to an App-V Management Server. But, this doesn’t enable you to deploy more than one Office App-V package to a single computer.

You can use the ODT to create App-V packages for Office 365 ProPlus. Creating packages for the volume-licensed versions of Office Professional Plus or Office Standard is not supported.

Optional.

&lt;Property Name="PACKAGEGUID"
          Value="12345678-ABCD-1234-ABCD-1234567890AB"/&gt;

The Package ID must follow the format of the example and can only use these characters:
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F

If you use any other characters, the App-V package is created with the default Package ID.
</value>
  </data>
  <data name="label6.Text" xml:space="preserve">
    <value>SharedComputerLicensing property (part of Property element)

Set SharedComputerLicensing to 1 if you deploy Office 365 ProPlus to shared computers by using Remote Desktop Services.

For more information, see Overview of shared computer activation for Office 365 ProPlus.

Optional. Default value is 0.

&lt;Property Name="SharedComputerLicensing"
          Value="0"/&gt;
&lt;Property Name="SharedComputerLicensing"
          Value="1"/&gt;
</value>
  </data>
  <data name="label7.Text" xml:space="preserve">
    <value>SCLCacheOverride property (part of Property element)

Set SCLCacheOverride to 1 if you’re using shared computer activation and you want to roam the licensing token. Use in conjunction with SCLCacheOverrideDirectory.

For more information, see Overview of shared computer activation for Office 365 ProPlus.

Optional. Default value is 0.

&lt;Property Name="SCLCacheOverride" Value="0"/&gt;
&lt;Property Name="SCLCacheOverride" Value="1"/&gt;
</value>
  </data>
  <data name="label8.Text" xml:space="preserve">
    <value>SCLCacheOverrideDirectory property (part of Property element)

Use SCLCacheOverrideDirectory to specify a folder location for the licensing token if you’re using shared computer activation and you want to roam the licensing token. Use in conjunction with SCLCacheOverride.

For more information, see Overview of shared computer activation for Office 365 ProPlus.

Optional.

&lt;Property Name="SCLCacheOverrideDirectory"
          Value="%appdata%\Microsoft\"/&gt;
&lt;Property Name="SCLCacheOverrideDirectory"
          Value="\\server\share\%username%"/&gt;
</value>
  </data>
  <data name="label9.Text" xml:space="preserve">
    <value>PinIconsToTaskBar property (part of Property element)

Defines whether shortcut icons for Office products are added to the Windows taskbar in Windows 7, 8, and 8.1.

If you install Office using a system account, which is common when deploying with System Center Configuration ManagerS, the icons will not be pinned even if this property is set to True.

Optional. The default value is True.

&lt;Property Name="PinIconsToTaskbar"
          Value="FALSE"/&gt;
&lt;Property Name="PinIconsToTaskbar"
          Value="TRUE"/&gt;
</value>
  </data>
</root>